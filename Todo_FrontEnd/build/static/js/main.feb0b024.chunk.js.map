{"version":3,"sources":["components/DashBoard.js","App.js","serviceWorker.js","index.js"],"names":["DashBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","axios","get","then","response","setState","todosItem","data","catch","error","console","log","onAdd","event","preventDefault","state","text","editIndex","editData","id","item","put","res","itemlength","length","post","edit","whenChange","target","value","onEdit","someText","find","v","onDone","delete","_this2","react_default","a","createElement","className","onSubmit","onChange","placeholder","map","i","key","onClick","Component","App","components_DashBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.feb0b024.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nclass DashBoard extends Component {\n    constructor() {\n        super();\n        this.state = {\n            todosItem: [],\n            text: \"\",\n            edit: null,\n            editIndex: \"\"\n        }\n    }\n    componentDidMount() {\n        this.getData()\n    }\n    getData = () => {\n        axios.get(\"http://localhost:9000/Todos\")\n            .then((response) => {\n               \n                this.setState({ todosItem: response.data })\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n    onAdd = (event) => {\n        event.preventDefault();\n        if (this.state.text === \"\") {\n            return\n        }\n        else if (this.state.editIndex !== \"\") {\n            const editData = { id: this.state.editIndex, item: this.state.text }\n            axios.put(\"http://localhost:9000/Todos/Edit/\"+this.state.editIndex, editData)\n                .then((res) => {\n                    this.getData();\n                })\n        }\n        else {\n            const items = this.state.todosItem;\n            const itemlength = items.length\n            axios.post(\"http://localhost:9000/Todos/Add\", {\n                id: itemlength+3,\n                item: this.state.text\n            })\n                .then(res => {\n                    this.getData()\n                })\n        }\n        this.setState({ text: \"\", edit: null, editIndex: '' })\n    }\n    whenChange = (event) => {\n        this.setState({ text: event.target.value })\n    }\n    onEdit = (id) => {\n        const todo = this.state.todosItem.find(v => {\n            return id === v.id\n        })\n        const someText = todo.item;\n        this.setState({ text: someText, editIndex: id, edit: true })\n    }\n    onDone = (id) => {\n        const selectedItem = this.state.todosItem.find((item) => {\n            return item.id === id;\n        })\n        if(selectedItem.item === this.state.text){\n            this.setState({text: '', editIndex: \"\", edit: null})\n        }\n            axios.delete(\"http://localhost:9000/Todos/Done/\"+id)\n                .then((res) => {\n                    this.getData();\n                })\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <form onSubmit={this.onAdd}>\n                        <div className=\"col s6 l6\">\n                        <input onChange={this.whenChange} placeholder=\"Enter New Item\" value={this.state.text} />\n                        </div>\n                        <div className=\"col s6 l6\">\n                        <button className=\"btn\">{this.state.edit ? (\"Edit\") : (\"Add\")}</button>\n                        </div>\n                    </form>\n                </div>\n                <table>\n                    <tbody>\n                    {this.state.todosItem.length > 0 ? (\n                        this.state.todosItem.map((v, i) =>\n                            <tr key={i} className=\"collection-item\">\n                            <td>{i+1}</td>\n                            <td>{v.item}</td>\n                            <td><button className=\"btn\" onClick={() => this.onEdit(v.id)}>Edit</button></td>\n                            <td><button className=\"btn\" onClick={() => this.onDone(v.id)}>Done</button></td>\n                            </tr>)\n                    ) : (<tr><td>No Todos</td></tr>)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\nexport default DashBoard;","import React, { Component } from 'react';\nimport DashBoard from './components/DashBoard';\n\n\nclass App extends Component {\n  render() {\n    return (\n        <div  className=\"container\">\n          <div className=\"teal white-text flow-text\">Todo-App</div>\n          <DashBoard />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}